import { useCallback, useState } from 'react';
import type { Task, Resource, TeamData, Sprint, Function, Employee } from '../api/types';

// –¢–∏–ø—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
export type EntityType = 'task' | 'resource' | 'team' | 'sprint' | 'function' | 'employee';

export interface CellChange {
  type: 'cell';
  entityType: EntityType;
  id: string;
  field: string;
  oldValue: any;
  newValue: any;
  timestamp: number;
}

export interface RowChange {
  type: 'row';
  entityType: EntityType;
  id: string;
  action: 'added' | 'deleted';
  data?: any;
  timestamp: number;
}

export type Change = CellChange | RowChange;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export interface ChangeTracker {
  changes: Change[];
  hasUnsavedChanges: boolean;
  addCellChange: (entityType: EntityType, id: string, field: string, oldValue: any, newValue: any) => void;
  addRowChange: (entityType: EntityType, id: string, action: 'added' | 'deleted', data?: any) => void;
  buildChangeLog: () => ChangeLog;
  clearChanges: () => void;
  reset: () => void;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
export interface ChangeLog {
  tasks?: Task[];
  resources?: Resource[];
  teams?: TeamData[];
  sprints?: Sprint[];
  functions?: Function[];
  employees?: Employee[];
  deleted?: {
    tasks?: string[];
    resources?: string[];
    teams?: string[];
    sprints?: string[];
    functions?: string[];
    employees?: string[];
  };
}

export function useChangeTracker() {
  const [changes, setChanges] = useState<Change[]>([]);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—á–µ–π–∫–∏
  const addCellChange = useCallback((
    entityType: EntityType,
    id: string,
    field: string,
    oldValue: any,
    newValue: any
  ) => {
    console.log('üîç addCellChange called:', { entityType, id, field, oldValue, newValue });
    console.log('üîç changeTracker state:', { changes: changes.length, hasUnsavedChanges });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (oldValue === newValue) {
      console.log('üîç Values are the same, skipping change');
      return;
    }

    const change: CellChange = {
      type: 'cell',
      entityType,
      id,
      field,
      oldValue,
      newValue,
      timestamp: Date.now()
    };

    console.log('üîç Adding change:', change);

    setChanges(prev => {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
      const filtered = prev.filter(c => 
        !(c.type === 'cell' && c.entityType === entityType && c.id === id && 'field' in c && c.field === field)
      );
      
      const newChanges = [...filtered, change];
      console.log('üîç New changes array:', newChanges);
      return newChanges;
    });
    
    setHasUnsavedChanges(true);
  }, []);

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
  const addRowChange = useCallback((
    entityType: EntityType,
    id: string,
    action: RowChange['action'],
    data?: any
  ) => {
    const change: RowChange = {
      type: 'row',
      entityType,
      id,
      action,
      data,
      timestamp: Date.now()
    };

    setChanges(prev => {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
      const filtered = prev.filter(c => 
        !(c.type === 'row' && c.entityType === entityType && c.id === id)
      );
      
      return [...filtered, change];
    });
    
    setHasUnsavedChanges(true);
  }, []);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const buildChangeLog = useCallback((): ChangeLog => {
    console.log('üîç buildChangeLog called with changes:', changes);
    console.log('üîç changes length:', changes.length);
    console.log('üîç hasUnsavedChanges:', hasUnsavedChanges);
    changes.forEach((change, index) => {
      console.log(`üîç change ${index}:`, {
        type: change.type,
        entityType: change.entityType,
        id: change.id,
        field: 'field' in change ? change.field : 'N/A',
        action: 'action' in change ? change.action : 'N/A'
      });
    });
    
    const changeLog: ChangeLog = {};
    const deleted: ChangeLog['deleted'] = {};

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
    const changesByType = changes.reduce((acc, change) => {
      if (!acc[change.entityType]) {
        acc[change.entityType] = [];
      }
      acc[change.entityType].push(change);
      return acc;
    }, {} as Record<EntityType, Change[]>);
    
    console.log('üîç changesByType:', changesByType);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    Object.entries(changesByType).forEach(([entityType, typeChanges]) => {
      const added = new Map<string, any>();
      const updated = new Map<string, any>();
      const deletedIds = new Set<string>();

      typeChanges.forEach(change => {
        if ('action' in change) {
          // RowChange
          if (change.action === 'added' && change.data) {
            added.set(change.id, change.data);
          } else if (change.action === 'deleted') {
            deletedIds.add(change.id);
          }
        } else {
          // CellChange - –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
          const existing = updated.get(change.id) || added.get(change.id);
          if (existing) {
            existing[change.field] = change.newValue;
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            const newObj = { id: change.id, [change.field]: change.newValue };
            updated.set(change.id, newObj);
          }
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ changeLog
      const allItems = [...added.values(), ...updated.values()];
      if (allItems.length > 0) {
        (changeLog as any)[`${entityType}s`] = allItems;
      }

      if (deletedIds.size > 0) {
        (deleted as any)[`${entityType}s`] = Array.from(deletedIds);
      }
    });

    if (Object.keys(deleted).length > 0) {
      changeLog.deleted = deleted;
    }

    return changeLog;
  }, [changes]);

  // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const clearChanges = useCallback(() => {
    setChanges([]);
    setHasUnsavedChanges(false);
  }, []);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
  const reset = useCallback(() => {
    setChanges([]);
    setHasUnsavedChanges(false);
  }, []);

  return {
    changes,
    hasUnsavedChanges,
    addCellChange,
    addRowChange,
    buildChangeLog,
    clearChanges,
    reset
  };
}
